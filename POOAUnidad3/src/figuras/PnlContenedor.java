/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package figuras;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.ArrayList;

/**
 *
 * @author paveg
 */
public class PnlContenedor extends javax.swing.JPanel {
    private Figura[] figuras;
    /**
     * Creates new form PnlContenedor
     */
    
    
    public PnlContenedor(Figura[] listaFiguras) {
        initComponents();
        this.figuras=listaFiguras;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    public void paint(Graphics g){
//        g.drawRect(100, 100, 200, 300);
//        g.drawPolygon(xPoints, yPoints, WIDTH);
        for (int i = 0; i < figuras.length; i++) {
            if(figuras[i]==null) break;
            Figura figuraADibujar=figuras[i];
            g.setColor(figuraADibujar.getColor());
            //if(figuraADibujar instanceof Circulo){
            if(figuraADibujar.getClass().equals(Circulo.class)){
                Circulo c=(Circulo)figuraADibujar;
                g.drawOval(c.getPunto().getX()-c.getRadio(),
                    c.getPunto().getY()-c.getRadio(),
                    c.getRadio()*2,
                    c.getRadio()*2);
            }else if(figuraADibujar.getClass().equals(Rectangulo.class)){
                Rectangulo r=(Rectangulo)figuraADibujar;
                g.drawRect(r.getPunto().getX(),
                    r.getPunto().getY()-r.getAltura(),
                    r.getBase(),
                    r.getAltura());
            }else{
                Triangulo t=(Triangulo)figuraADibujar;
                int valoresX[]=new int[3];
                int valoresY[]=new int[3];
                valoresX[0]=t.getPunto().getX();
                valoresY[0]=t.getPunto().getY();
                valoresX[1]=t.getPunto().getX()+t.getBase();
                valoresY[1]=t.getPunto().getY();
                if(t.isRectangulo()){
                    valoresX[2]=t.getPunto().getX();
                    valoresY[2]=t.getPunto().getY()-t.getAltura();
                }else{
                    valoresX[2]=t.getPunto().getX()+t.getBase()/2;
                    valoresY[2]=t.getPunto().getY()-t.getAltura();
                }
                g.drawPolygon(valoresX,valoresY,3);
            }
            
        }
        
    }
    
    
    
    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
